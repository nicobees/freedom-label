# syntax=docker/dockerfile:1

# For Raspberry Pi 2 Model B (ARMv7), ensure this tag supports arm/v7.
# python:3.12-slim is Debian-based and multi-arch. On buildx, it selects arm/v7 on Pi.
FROM python:3.12-slim

WORKDIR /freedom-label-app

ENV DEBIAN_FRONTEND=noninteractive

# System build deps for Python C extensions + Pillow image libs
# Also install CUPS stack:
# - cups (server + cupsd)
# - cups-bsd (lpr, lp, lpq, etc.)
# - cups-client (CUPS client tools)
# - printer-driver-gutenprint + openprinting-ppds (broad driver coverage; optional)
# - dbus, avahi-daemon (optional but commonly needed for USB discovery & AirPrint)
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libffi-dev \
    zlib1g-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libfreetype6-dev \
    libwebp-dev \
    cups \
    cups-bsd \
    cups-client \
    printer-driver-gutenprint \
    openprinting-ppds \
    dbus \
    avahi-daemon \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Poetry
ENV POETRY_VIRTUALENVS_IN_PROJECT=true
ENV POETRY_VERSION=1.8.2

RUN pip install "poetry==$POETRY_VERSION"

# App deps
COPY pyproject.toml poetry.lock* ./

RUN poetry install --no-root --only main

# App code
COPY ./app ./app

# Prepare non-root user and grant print permissions
# Add user to lp and lpadmin so it can submit/manage jobs if needed
RUN useradd --create-home --shell /bin/bash appuser \
 && usermod -aG lp,lpadmin appuser \
 && mkdir -p /freedom-label-app/app/services/pdf_output \
 && chown -R appuser:appuser /freedom-label-app/app

# CUPS directories as volumes for persistence (optional)
# /etc/cups holds printers.conf and PPDs, /var/spool/cups holds job spool
VOLUME ["/etc/cups", "/var/spool/cups"]

# Provide a minimal cupsd.conf if you want to ensure it listens on all interfaces.
# Otherwise, rely on image defaults and adjust via bind-mount.
COPY ./cupsd.conf /etc/cups/cupsd.conf

# Simple entrypoint script to start dbus, cupsd (foreground), then uvicorn app.
# Using bash -lc allows sourcing env and failing fast on errors.
COPY ./entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

USER appuser

# Expose CUPS and app ports
EXPOSE 631 8000

# Environment for PATH in case service layers propagate differently
ENV PATH="/home/appuser/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

# Start both CUPS and the Python app
CMD ["/usr/local/bin/entrypoint.sh"]
